import os
import re
import subprocess
import itertools

#==================================================================== RULE ALL ============================================================================#

rule all:
    input: "all_samples.vcf",
     	   "PCA.svg"

#=============================================================== DOWNLOAD DATA =======================================================================#

def download_data(data_url):
    subprocess.run(["wget", "-O", "data.tar.gz", data_url])
    subprocess.run(["gunzip", "data.tar.gz"])
    subprocess.run(["mkdir", "data"])
    subprocess.run(["tar", "-xf", "data.tar", "--strip-components=1", "-C", "./data"])

if not os.path.exists("data") and os.path.isdir("data"):
    download_data(config["data_url"])

def rename_data(files):
    subprocess.run(["rename", "s/.trim.sub//", files])


def check_filenames(directory_path, regex_pattern):
    try:
        if not os.path.exists(directory_path) or not os.path.isdir(directory_path):
            print(f"The directory {directory_path} does not exist.")
            return

        filenames = os.listdir(directory_path)
        pattern = re.compile(regex_pattern)
        matching_filenames = [filename for filename in filenames if re.search(pattern, filename)]

        if matching_filenames:
            return matching_filenames

    except Exception as e:
        print(f"An error occurred: {e}")


if check_filenames("data", "trim"):
    rename_data(files="./data/*.fastq")

samples = [ str(file) for file in sorted([f[:-8] for f in os.listdir("data") if f.endswith(".fastq")]) ]

print ( samples ) 

#=============================================================== FASTQC AND TRIMMING =======================================================================#

rule fastqc:
    input:
        r1="data/{sample}_1.fastq",
        r2="data/{sample}_2.fastq"

    output: "fastqc/{sample}_fastqc/fastqc_report.html"
    threads: 1
    conda: "envs/dnaseq.yaml"
    shell:
        """ mkdir -p fastqc && 
	    fastqc {input.r1} -t {threads} && 
            fastqc {input.r2} -t {threads} """


rule download_genome:
    output: "genome.fasta"
    params: genome_url=config["genome_url"]
    shell: """ wget -O 'genome.fasta.gz' {params.genome_url} && gunzip 'genome.fasta.gz' """


#==================================================================== MAPPING =============================================================================#

rule build_genome_index:
    input: genome = rules.download_genome.output
    output: "index_chkp"
    conda: "envs/dnaseq.yaml"
    threads: config['bwa_index_threads']
    message: "Building genome index with bwa-mem2 index"
    params: algorithm = config['bwa_index_algorithm']
    shell:
        """ bwa-mem2 index -a {params.algorithm} -@ {threads} {input.genome} && touch index_chkp """

rule mapping_and_sorting:
    input:
        ch="index_chkp",
        r1="data/{sample}_1.fastq",
        r2="data/{sample}_2.fastq"

    conda:
        "envs/dnaseq.yaml"

    message:
        "Mapping reads to the genome and converting to a sorted BAM file"

    params:
        samtools_sthreads=config['samtools_sthreads'],
        index_sthreads=config['samtools_index_threads'],
        samtools_mem_alloc=config['samtools_mem_alloc'],
        genome=rules.download_genome.output

    output:
        bam="{sample}.bam"

    shell:
        """
        bwa-mem2 mem {params.genome} {input.r1} {input.r2} | \
        samtools view -b - | \
        samtools sort -m {params.samtools_mem_alloc} --threads {params.samtools_sthreads} -o {output.bam} && \
        samtools index -@ {params.index_sthreads} {output.bam}
        """

rule pileup_and_vcf:
     input:
         bams = expand ( "{sample}.bam", sample = samples ),
         genome = rules.download_genome.output
    	    
     output: "all_samples.vcf"
     conda: "envs/dnaseq.yaml"
     message: "Generating pileup file and converting bcf to vcf"
     shell: """ bcftools mpileup -Ou -f {input.genome} {input.bams} | bcftools call -Ou -mv -o all_samples.vcf """


rule pca:
     input: vcf = "all_samples.vcf"
     output: "PCA.svg"
     shell: """ Rscript scripts/pca.R {input.vcf} """